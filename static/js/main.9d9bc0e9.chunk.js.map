{"version":3,"sources":["SetGameDifficulty.js","Header.js","GameOver.js","Card.js","GameBoard.js","WikiBoard.js","fetchJSON.js","fetchWiki.js","createDeck.js","fetchCountryAPI.js","App.js","index.js"],"names":["DIFFICULTY_VALS","name","value","SetGameDifficulty","deckSizeNum","setDeckSizeNum","handleSubmit","onSubmit","className","onChange","e","target","map","data","key","disabled","Header","GameOver","flipAttempts","correct","incorrect","Card","country","flagClick","activeCards","flipped","solved","flag","img","isCardFlippable","length","onClick","alt","src","Gameboard","cardDeck","setCardDeck","setFlipAttempts","setWikiBoardData","gameSolved","useState","setActiveCards","addFlipValuetoFlipAttempts","prevState","useEffect","filteredArr","filter","c","index","addToWikiBoard","setTimeout","state","setCorrectAttempt","setIncorrectAttempt","boardIndex","gameDeck","i","WikiCountryCard","wiki","WikiBoard","wikiBoardData","countryData","board","countryID","fetchJSON","url","a","fetch","res","json","console","error","fetchWiki","setCountryData","then","extract","setCountryDataWiki","shuffle","array","j","Math","floor","random","createDeck","countries","slice","NAME_CORRECTIONS","Georgia","fetchCountryAPI","countryName","setCountryDataFromFetch","App","resetFlipAttempts","preventDefault","GameBoard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d9bc0e9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst DIFFICULTY_VALS = [\n  {\n    name: \"Select Difficulty Level\",\n    value: null\n  },\n  {\n    name: \"Easy\",\n    value: 6\n  },\n  {\n    name: \"Normal\",\n    value: 12\n  },\n  {\n    name: \"Difficult\",\n    value: 18\n  }\n];\n\nconst SetGameDifficulty = ({ deckSizeNum, setDeckSizeNum, handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit} className=\"selectDiv\">\n      <select\n        value={deckSizeNum}\n        onChange={e => setDeckSizeNum(e.target.value)}\n      >\n        {DIFFICULTY_VALS.map(data => (\n          <option key={data.name} value={data.value}>\n            {data.name}\n          </option>\n        ))}\n      </select>\n      <button className=\"btn\" disabled={!deckSizeNum}>\n        Start!\n      </button>\n    </form>\n  );\n};\n\nexport default SetGameDifficulty;\n","import React from \"react\";\nimport SetGameDifficulty from \"./SetGameDifficulty\";\n\nfunction Header({ handleSubmit, deckSizeNum, setDeckSizeNum }) {\n  return (\n    <div className=\"header\">\n      <span>Flag Memory</span>\n      <SetGameDifficulty {...{ handleSubmit, deckSizeNum, setDeckSizeNum }} />\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nconst GameOver = ({ flipAttempts }) => {\n  return (\n    <div className=\"gameover\">\n      <h1>Solved!</h1>\n      <h2>in {flipAttempts.correct + flipAttempts.incorrect} attemps</h2>\n      <h3>\n        {flipAttempts.correct} correct attemps and {flipAttempts.incorrect}{\" \"}\n        incorrect\n      </h3>\n      <p>select a new difficulty level to start again</p>\n    </div>\n  );\n};\n\nexport default GameOver;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction Card({ country, flagClick, activeCards }) {\n  let { flipped, solved, flag } = country;\n  let img = flipped ? flag : null;\n  let isCardFlippable = activeCards.length < 2 && !(flipped || solved);\n\n  return (\n    <div\n      className=\"card\"\n      onClick={isCardFlippable ? () => flagClick(country) : null}\n    >\n      {solved ? <span className=\"check\">âœ”</span> : <img alt=\"\" src={img} />}\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\n\nconst TIMEOUT_VALUE = 400;\n\nfunction Gameboard({\n  cardDeck,\n  setCardDeck,\n  setFlipAttempts,\n  setWikiBoardData,\n  gameSolved\n}) {\n  const [activeCards, setActiveCards] = useState([]);\n\n  const addFlipValuetoFlipAttempts = (setFlipAttempts, value) => {\n    setFlipAttempts(prevState => {\n      prevState[value]++;\n      return prevState;\n    });\n  };\n\n  const setCorrectAttempt = (setCardDeck, name) => {\n    setCardDeck(prevState =>\n      prevState.map(state => {\n        if (state.name === name) {\n          state.flipped = false;\n          state.solved = true;\n        }\n        return state;\n      })\n    );\n  };\n\n  const setIncorrectAttempt = setCardDeck => {\n    setCardDeck(prevState =>\n      prevState.map(state => {\n        state.flipped = false;\n        return state;\n      })\n    );\n  };\n\n  const addToWikiBoard = (setWikiBoardData, country) => {\n    setWikiBoardData(prevState => {\n      let filteredArr = prevState.filter(c => country.index !== c);\n      return [country.index, ...filteredArr];\n    });\n  };\n\n  useEffect(() => {\n    const pairMatch = country => {\n      addFlipValuetoFlipAttempts(setFlipAttempts, \"correct\");\n      addToWikiBoard(setWikiBoardData, country);\n      setTimeout(() => {\n        setActiveCards([]);\n        setCorrectAttempt(setCardDeck, country.name);\n      }, TIMEOUT_VALUE);\n    };\n\n    const pairNoMatch = () => {\n      addFlipValuetoFlipAttempts(setFlipAttempts, \"incorrect\");\n      setTimeout(() => {\n        setActiveCards([]);\n        setIncorrectAttempt(setCardDeck);\n      }, TIMEOUT_VALUE);\n    };\n\n    if (activeCards.length === 2) {\n      activeCards[0].name === activeCards[1].name\n        ? pairMatch(activeCards[0])\n        : pairNoMatch();\n    }\n  }, [activeCards, setWikiBoardData, setFlipAttempts, setCardDeck]);\n\n  const flagClick = country => {\n    setCardDeck(prevState => {\n      //prettier-ignore\n      prevState[country.boardIndex].flipped = !prevState[country.boardIndex].flipped;\n      return prevState;\n    });\n    setActiveCards(prevState => [...prevState, country]);\n  };\n\n  const gameDeck = cardDeck.map((country, i) => (\n    <Card {...{ country, flagClick, activeCards }} key={country.name + i} />\n  ));\n\n  return (\n    <div className={gameSolved ? \"noDisplay\" : \"cardGrid\"}>{gameDeck}</div>\n  );\n}\n\nexport default Gameboard;\n","import React from \"react\";\n\nconst WikiBoard = ({ wikiBoardData, countryData }) => {\n  let board = wikiBoardData.map(countryID => {\n    let { name, flag, wiki } = countryData[countryID];\n    return <WikiCountryCard key={countryID} {...{ name, flag, wiki }} />;\n  });\n  return <div className=\"wikiBoard\">{board}</div>;\n};\n\nconst WikiCountryCard = ({ name, flag, wiki }) => {\n  return (\n    <div key={name} className=\"wiki\">\n      <h1>{name}</h1>\n      <img alt={`flag of ${name}`} src={flag} />\n      <p>{wiki}</p>\n    </div>\n  );\n};\n\nexport default WikiBoard;\n","const fetchJSON = async url => {\n  try {\n    let res = await fetch(url);\n    let data = await res.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport default fetchJSON;\n","import fetchJSON from \"./fetchJSON\";\n\nconst URL_WIKI = \"https://en.wikipedia.org/api/rest_v1/page/summary/\";\n\nconst setCountryDataWiki = (c, setCountryData, json) => {\n  setCountryData(prevState => {\n    prevState[c.index].wiki = json.extract;\n    return prevState;\n  });\n};\n\nconst fetchWiki = (c, setCountryData) => {\n  fetchJSON(URL_WIKI + c.name).then(json => {\n    setCountryDataWiki(c, setCountryData, json);\n  });\n};\n\nexport default fetchWiki;\n","import fetchWiki from \"./fetchWiki\";\n\nconst createDeck = (setCardDeck, countryData, setCountryData, deckSizeNum) => {\n  let countries = shuffle([...countryData]);\n  countries = countries.slice(0, deckSizeNum);\n  countries.map(c =>\n    !countryData[c.index].wiki ? fetchWiki(c, setCountryData) : c\n  );\n  countries = shuffle([...countries, ...countries]);\n  setCardDeck(countries.map((c, i) => ({ ...c, boardIndex: i })));\n};\n\n//Fisherâ€“Yates shuffle function\nconst shuffle = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport default createDeck;\n","import fetchJSON from \"./fetchJSON\";\nconst NAME_CORRECTIONS = {\n  \"Korea (Democratic People's Republic of)\": \"North Korea\",\n  \"Virgin Islands (British)\": \"British Virgin Islands\",\n  \"Macedonia (the former Yugoslav Republic of)\": \"North Macedonia\",\n  Georgia: \"Georgia (country)\"\n};\n\nconst setCountryDataFromFetch = (data, setCountryData) => {\n  setCountryData(\n    data.map((country, index) => {\n      let countryName = country.name;\n      return {\n        name: NAME_CORRECTIONS[countryName] || countryName,\n        flag: country.flag,\n        index,\n        flipped: false,\n        solved: false,\n        wiki: null\n      };\n    })\n  );\n};\n\nconst fetchCountryAPI = (url, setCountryData) => {\n  fetchJSON(url).then(data => setCountryDataFromFetch(data, setCountryData));\n};\n\nexport default fetchCountryAPI;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport GameOver from \"./GameOver\";\nimport GameBoard from \"./GameBoard\";\nimport WikiBoard from \"./WikiBoard\";\nimport createDeck from \"./createDeck\";\nimport fetchCountryAPI from \"./fetchCountryAPI\";\nimport \"./App.css\";\n\nconst COUNTRY_URL = \"https://restcountries.eu/rest/v2/all\";\n\nconst App = () => {\n  const [deckSizeNum, setDeckSizeNum] = useState(\"\");\n  const [flipAttempts, setFlipAttempts] = useState({});\n  const [cardDeck, setCardDeck] = useState([]);\n  const [countryData, setCountryData] = useState([]);\n  const [wikiBoardData, setWikiBoardData] = useState([]);\n\n  useEffect(() => {\n    resetFlipAttempts(setFlipAttempts);\n    fetchCountryAPI(COUNTRY_URL, setCountryData);\n  }, []);\n\n  const resetFlipAttempts = setFlipAttempts => {\n    setFlipAttempts({\n      correct: 0,\n      incorrect: 0\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    resetFlipAttempts(setFlipAttempts);\n    createDeck(setCardDeck, countryData, setCountryData, deckSizeNum);\n    setDeckSizeNum(0);\n  };\n\n  let gameSolved =\n    cardDeck.length > 0 && cardDeck.filter(c => !c.solved).length === 0;\n\n  return (\n    <div className=\"app\">\n      <Header\n        {...{ flipAttempts, handleSubmit, deckSizeNum, setDeckSizeNum }}\n      />\n      {gameSolved && <GameOver flipAttempts={flipAttempts} />}\n      <GameBoard\n        {...{\n          cardDeck,\n          setCardDeck,\n          setFlipAttempts,\n          setWikiBoardData,\n          countryData,\n          gameSolved\n        }}\n      />\n\n      <WikiBoard {...{ wikiBoardData, countryData }} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}